@page "/"
@using System.Text.Json

<style>
    button {
        background-color: #00aaff;
        color: white;
        border: 2px solid cyan;
        border-radius: 10px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        button:hover {
            background-color: #0088cc;
            transform: scale(1.05);
        }

    body {
        font-family: Arial, sans-serif;
        background-color: #f0f8ff;
        color: #333;
        margin: 20px;
    }

    h1 {
        color: #0077cc;
        font-size: 2.5em;
        text-align: center;
        text-shadow: 1px 1px 2px #00aaff;
    }

    h2 {
        color: #0088cc;
        font-size: 2em;
        border-bottom: 2px solid cyan;
        padding-bottom: 5px;
        margin-bottom: 15px;
    }

    h3 {
        color: #00aaff;
        font-size: 1.5em;
        margin-bottom: 10px;
    }

    .table-container {
        max-width: 800px;
        margin: 0 auto;
        overflow-x: auto;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #ffffff;
    }

        .table thead {
            background-color: #00aaff;
            color: white;
            text-align: left;
        }

        .table th {
            font-size: 16px;
            font-weight: bold;
            border-bottom: 2px solid #0077cc;
        }

        .table td {
            border-bottom: 1px solid #e0e0e0;
            font-size: 14px;
        }

        .table tr:nth-child(odd) {
            background-color: #f0f8ff;
        }

        .table tr:nth-child(even) {
            background-color: #ffffff;
        }

        .table tr:hover {
            background-color: #e0f7ff;
        }

        .table td .action-buttons {
            display: flex;
            gap: 5px;
        }

        .table td button {
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s;
            min-width: 80px;
            text-align: center;
        }

            .table td button:hover {
                background-color: #0077cc;
            }

    .form-control {
        width: 100%;
        max-width: 400px;
        padding: 10px;
        font-size: 16px;
        border: 2px solid #00aaff;
        border-radius: 8px;
        background-color: #f9fcff;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        color: #333;
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        .form-control:focus {
            border-color: #0077cc;
            box-shadow: 0 0 8px rgba(0, 119, 204, 0.5);
            outline: none;
        }

        .form-control::placeholder {
            color: #aaa;
            font-style: italic;
        }

    .btn {
        margin-top: 5px;
    }

    .btn-secondary {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 150px;
        text-align: center;
        transition: background-color 0.3s, transform 0.2s;
        background-color: #d3d3d3;
        color: black;
    }

    .btn-success {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 150px;
        text-align: center;
        transition: background-color 0.3s, transform 0.2s;
        background-color: #009acd;
        color: white;
    }


        .btn-success:hover {
            background-color: #009acd;
            transform: scale(1.05);
        }

    .btn-secondary:hover {
        background-color: #a9a9a9;
        transform: scale(1.05);
    }
</style>

<h1>Consulta de Datos</h1>

<div>
    <label for="idConsulta">ID de Cliente:</label>
    <input @bind="idConsulta" id="idConsulta" type="text" />
    <button @onclick="ConsultarDatos">Consultar</button>
</div>

<br />

@if (clienteDatos == null && string.IsNullOrEmpty(idConsulta))
{
    <h3>Ingrese un ID para consultar información.</h3>
}
else if (nocli)
{
    <h3>No se encontró información para el ID ingresado.</h3>
}
else if (clienteDatos != null)
{
    <Switch Class="mt-3" Value="agree" Label="Agregar un medicamento?" ValueExpression="() => agree" ValueChanged="SwitchChanged" />
    <div style="display: flex; justify-content:space-around; margin-top: 20px;">
        <div>
            <h2>Cliente:</h2>
            <h5>@clienteDatos.nombre - @clienteDatos.identificacion</h5>
            @if (agree)
            {
                <br />
                <div class="mb-3">
                    <label for="basic-url" class="form-label">Elija el Medicamento a Asignar</label>
                    <select @bind="newCMedicamento.idmedicamento" class="form-select" aria-label="Default">
                        <option disabled selected value="0">Medicamento</option>
                        @foreach (var m in medicamentoAll)
                        {
                            <option value="@m.idmedicamento">@m.descripcion</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label>Ingrese su dosis:</label>
                    <InputText @bind-Value="dosis" class="form-control" />
                </div>
                <Button Color="ButtonColor.Primary" @onclick="AgregarClienteM"> Agregar </Button>
                <Button Color="ButtonColor.Secondary" @onclick="ToggleSwitch"> Cancelar </Button>
            }
        </div>
        @if (!medicamentoDatos.Any())
        {
            <div>
                <h3>El ususario no tiene medicamentos registrados</h3>
            </div>
        }
        else
        {
            <div>
                <h2>Medicamentos:</h2>
                @foreach (var cm in clienteMedicamentoDatos)
                {
                    @foreach(var m in medicamentoDatos)
                    {
                        if(cm.idmedicamento == m.idmedicamento)
                        {
                            <div style="display: flex;">
                                <div style="padding-right: 15px; ">
                                    <h5>@m.marca - @m.descripcion</h5>
                                    <h5>@cm.dosis</h5>
                                </div>
                                <Button Color="ButtonColor.Danger" @onclick="() => EliminarClienteM(cm)"> Eliminar </Button>
                            </div>
                            <br />
                        }
                    }
                }
            </div>
        }
    </div>

}

@code {
    @inject NavigationManager _navigationManager

    private blCLiente cliente = new();
    private blClienteMedicamento clienteM = new();
    private blMedicamento medicamento = new();

    private string idConsulta = string.Empty;
    private string dosis = string.Empty;
    private cClienteFarmacia clienteDatos = default!;
    private cClienteMedicamento newCMedicamento = new();
    private IEnumerable<cClienteMedicamento> clienteMedicamentoDatos = Enumerable.Empty<cClienteMedicamento>();
    private IEnumerable<cMedicamento> medicamentoAll = Enumerable.Empty<cMedicamento>();
    private IEnumerable<cMedicamento> medicamentoDatos = Enumerable.Empty<cMedicamento>();
    private bool agree = false;
    private bool nocli = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = _navigationManager.Uri;
        var uriParts = new Uri(uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriParts.Query);

        if (query["CurrentUser"] != null)
        {
            var serializedUser = query["CurrentUser"];
            clienteDatos = JsonSerializer.Deserialize<cClienteFarmacia>(serializedUser);

            await HalfConsulta();
        }


    }

    private void ReloadPage()
    {
        var serializedUser = JsonSerializer.Serialize<cClienteFarmacia>(clienteDatos);

        var parameters = new Dictionary<string, object>
{
    { "CurrentUser", serializedUser }
};

        var uri = _navigationManager.GetUriWithQueryParameters(parameters);

        _navigationManager.NavigateTo(uri, forceLoad: true);
    }

    private async Task HalfConsulta()
    {
        try
        {
            if (clienteDatos != null)
            {
                // Consulta los datos de cliente medicamento relacionados con el cliente
                clienteMedicamentoDatos = (await clienteM.getModel()).Where(cm => cm.identificacion == clienteDatos.identificacion);

                // Filtrar medicamentos asociados a las recetas encontradas
                var medicamentoIds = clienteMedicamentoDatos.Select(cm => cm.idmedicamento);
                medicamentoAll = await medicamento.getModel();
                medicamentoDatos = medicamentoAll.Where(m => medicamentoIds.Contains(m.idmedicamento));
            }
            else
            {
                // Si no se encuentra el cliente, limpiar los datos
                clienteMedicamentoDatos = Enumerable.Empty<cClienteMedicamento>();
                medicamentoDatos = Enumerable.Empty<cMedicamento>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante la consulta: {ex.Message}");
        }
    }

    private async Task ConsultarDatos()
    {
        try
        {
            nocli = false;

            if (int.TryParse(idConsulta, out int idParsed))
            {
                // Consulta los datos de cliente por ID
                clienteDatos = (await cliente.getModel()).FirstOrDefault(c => c.identificacion == idParsed);

                if (clienteDatos != null)
                {
                    // Consulta los datos de cliente medicamento relacionados con el cliente
                    clienteMedicamentoDatos = (await clienteM.getModel()).Where(cm => cm.identificacion == idParsed);

                    // Filtrar medicamentos asociados a las recetas encontradas
                    var medicamentoIds = clienteMedicamentoDatos.Select(cm => cm.idmedicamento);
                    medicamentoAll = await medicamento.getModel();
                    medicamentoDatos = medicamentoAll.Where(m => medicamentoIds.Contains(m.idmedicamento));
                }
                else
                {
                    // Si no se encuentra el cliente, limpiar los datos
                    clienteMedicamentoDatos = Enumerable.Empty<cClienteMedicamento>();
                    medicamentoDatos = Enumerable.Empty<cMedicamento>();
                    nocli = true;
                }
            }
            else
            {
                Console.WriteLine("El ID ingresado no es válido.");
                clienteDatos = null;
                clienteMedicamentoDatos = Enumerable.Empty<cClienteMedicamento>();
                medicamentoDatos = Enumerable.Empty<cMedicamento>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante la consulta: {ex.Message}");
        }
    }

    private async Task AgregarClienteM()
    {
        newCMedicamento.identificacion = clienteDatos.identificacion;
        newCMedicamento.dosis = dosis;

        await clienteM.postModel(newCMedicamento);

        ReloadPage();
    }

    private async Task EliminarClienteM(cClienteMedicamento cm)
    {
        await clienteM.deleteModel(cm);
        ReloadPage();
    }

    private void SwitchChanged(bool value)
    {
        agree = value;
    }

    private void ToggleSwitch()
    {
        agree = !agree;
        newCMedicamento = new();
        dosis = string.Empty;
    }
}
